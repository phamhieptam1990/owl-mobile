# Automatically generated on 2022-09-16 UTC from https://codemagic.io/app/6191d19e4226b2dd29bfb892/settings
# Note that this configuration is not an exact match to UI settings. Review and adjust as necessary.

workflows:
 uat-release-internal-deparment:
    name: Uat Releasing Internal Deparments
    instance_type: mac_mini_m1
    max_build_duration: 105
    environment:
      vars:
        FCI_KEYSTORE_PATH: /tmp/keystore.keystore
        FCI_KEYSTORE: Encrypted(Z0FBQUFBQmpKRGZpSGdZRm56SXZXSG5idEVsNFdQTDQtN28wUDlIcHhTY2hVUE5IWkQweExibThZcFJnQ3JuMkxVSWhUbXBlN0xVWXZjbUFxUGljclpNa0ctTzIzUzZtaTNDREpaX2h4SzRBQ2pDcXplRDJBdnp3TUMwRzVVdUp6LURxQUF6aGFENXY3OTliRXZEUk5xdEplc1E4aGlheEZ3cUFfOXptajNsd3JhcTc5YWV1NVdZdU1TcmY3WHlDM0wxMHBLOXRPQVNDdHFsM1NBQUtPbktaNmlIU3lOTGc4YTdHZGpiNTd6T0ItZHpSa0QwZnV3TmpVbWpVdFBUTlNmcGJ5WlNrMllobEhRYXcyWXl0TmVPOXRxQi1IQkVNQ043UVNVc1RvQlJ0SUdQdUc2LUxfY1F5b2NPRlVqb0hWdG5iVjNIYU1UUWlWTzRvM3J4NXpKbHRXa2QyUFZsYng4ZGktRUQ1T0NFNzUtWmxEU3V3VW9KZ1NBS0t0TjNkMm5EVkgwOVRKYXI3Q2dPLTJYdFVlSXozMGRkdjFiOVFfY21pdDFhcUJpZ3BlY3R5QmtVTVB4WU5lVDFDRmNsd3lfQWZNd29Pc0dJeUY5Z1BHNjNVcDRtTGd2b0szWk01bllYazZ1Q09EUERFemFsY2ZxY0RXWHBZUEotNmJXRnJ5TEdxOHRRQVhtNWptbXI0UldiQW9UU2daTlU1ZWNvR2U4SGUySDNSRzZiWURvd3duY2NIUmdVWlRuSU4tZmYxLVl6TlhpSFpsVGgwTEJjVmI4UFU1ZXh3dmg5R29YNm9yaDZxRWI1WkFvaXFUb3l3Q2hnSG05ZUZMcHFXcXhXNUhJbkpvVDY0WDlMVUk1TmhTZ0lQR3RkbTMwNVFRcnhzamdKTVV0cUFrTHJLRjZJVzdWUl9hV3U3b2dzMnJFbmhFcDlzY0FZVlFsS040ZlpNdWZ3ZXFGTHA4aWJHZTZFLTd6UmtVdkhqdThkaWVLTTJ4RGtYU3JFX1VxaUk4eFdrVkQ2UENMQmNNRlRrTGh3RzlidVhmMUFJUUlaYWhKS1R3Yi13aFRiTkZITTJqX0dHc2xDUnU5cE1yaU5DVmozbjhaeC0wb29VcWRidHcwcEVrZkF3Q1ZCWlBLUDdYZEIxYnppdEFFT0I1ZFBIcl9OUk8wTE8yTDF4TnJWYVVUbVdORHpYRlkwdFFTVXktNGpBNnBYa09uUW01dVpHZkpYbm5TWWt6ZWJtaXRzRndYQXVUcFBEX1ZMUm9YVzI5bTIyN3EwV3ZWS3MzYzAzc1FMN1dZN0E5X3FIZWdwdS1ocUNKa1J2b2lZSWhKX0p0dDVvekw0YUduQ2RyU21JbG5sQmJkdk5RTHZscm9BcG83VlFGbktxX1BsWXRMcFNpcmhzRjV5aVpEVXUtTy1KREg2Y3BVUHlxamdrU3VqbDNpSHZaRUFSa0QwT3BaMmlvbTY4ckE0V3NsOVRKS04zd3pxQXoxNGgwbTRPd3pKSk4zRlBoenFCMW9UYUJkS1dIaVZWX1J1R2dEeWk3dW9taVpKUWItejhQakdBTG0xTnlnQnUzemhDMGlfN3VXRjhIdWN0ZldVMzE1SmJaRjRqYlBYdFVncVlyd2ptanZ5bHhpUHc3TW4wYTAtUXhPRkQwTTFLc3pqUy1iSEhwTXl6ZGc2aXh5aGJWbjFleWozT1RTdVJRUzV1NXZhUWVZQ0V4WE15VjFTNFFTdlZlZENNYkFROE16WC1zMWY0ckRrZHIwYkpmZ3FTVHh2NmV5cGRzUEdmUU5ua0lqUzZweW9xeUhKT1NjeUJwTkN4Zy1LeGx2eVpQb2ZQZGk3c0x0WEphM291TmdTNm43bnpOYXoxV0hTaHRIMTg0MDU2VkVFTHdjbi1oUU9IcXk2dk9PUmpoYXVDNThSTW1iSnl0amhhVG9nd3VYYnNVNm1BZHBIdEhkcWdCLTlNQXptYlFHXzVwdFJRWDdWUEtDYmhyaGF1c3RXRkVNRVI3U1ZMT19pdFNxX2lIYTFyTUZaZExQSW5KSVF1NEdkeEM0bV83RG9sR192UEczR2lzOE9mYU5GeUtmQkZ5M0locHVsbktxVkRicUdRYjJzcUZQc0VYai1jNld1dzlkdlZfUDZNRGdvc0pybDBhcVNadnZidUd0aUlBZFFJT1gtRWpRRk9TR3V1eUU3UEg5MlJ4RUZMLTRvT0QyNlBPMWg1ZEUyOGpnZ2V2OWlQVTM1WE1wNTlraTFFZ1VQNWs2UDRjNDh0X1NhYkZUdjdwNk50U0FqWnhoQ1RNb0pNd3JiZnMzVnk5eHNIOWZvM05yNFl4WTRZNHNPNkhMX3ZmejYyWF83NWhXVTkyYjFGN3pvZDRvQ2gwZWtqTFFDM3pma2FoODRvWGl4RlVpMGRURk1mRXNxeFZadERpa0pxX09kTHZLaEdlMDRRNjJmT1RXU1JHMW5fcGRjeFVCN3ZOX3VmUGNKYV9XcmMwVjZpb09ad2VWcmN0NUVtcTNZZFpSZm9JQUNRVkFXaTdNSmd4dHo3VERJYzU5MlFpS2VPa29EMk9xLTRhMUlGRVBzTm9sb0kxMW1DcXFBdnBkYUZCMXZlaEREc29ZcEIxR2p0WnlzNTFFX1NnNnNLdjRKZmxIUjBGYThWMGg0MHlmY0RvcTlWMDQ2MkZTaVI3cktwbmNjTjlXd3NfRlcwYW1MTWtPc0NSbXRENXVNZXVIYUN4WGxFVEhTMlZ6MEEtUXZ0c3RtREJDR2VJUC1WWVNYQ0NnaDZ2WHYzelRFdklVRnZIblhMQVJnM1Fxdm94OU5sOTdXVUlyRklyYzhWWW5mYjZEUHZXMmNnaXRNODdkVUhBSUhpV0J4VmdpQzZiU1A4SzFaWFpXb2lEVXpzRDRJWHVmOUZvVDdxdFp0YS1KUXJsellEclJ4T3RjY2lCMTJjNlpIWWNHNW1Ydml3bDMxRjNtQ2lPWms0akRMdGI0bHp3WUgzNVBsT0laTkRNVFo4NHN2dnFpVnRaQ0Jua0JjcjNwTVNUVV9VOW9aNVFuOU9aMk9lM1ZwMGdVbUlmZERQOHF0Z0RRaUo5bUs2blpmUkN0QXVKcWhNSmIzZklJV09kdU96czR6NlNXNHlzLTVicEs3dmZvUVlfVWg5cHB6VE1XTUFWZkRJLUVVaW9ab2FRcXFKUEUtNTJFSnZweUFmaHR5TUhfY0JqZnAxVFJ6YVcyc3RybkdndnZZM210MDZxTDg4NFFzaEl0YktvY2RyOUlJT0VVWlVUNndUQ0lVdmx1d3RVN256dERDSWJLZC1XQlUzYktlZ1pNMFlqLWNTcng4a3RkYWFHd3RWSWx0SWZZb2huS3BpUHd1UDNaMC03MjRQVEU4ZHRSN1Z2bGcyVHFYd1c1cHotVEFGV0tMLWdIVGFpMVlrSXE3YjdjejBaUUVPQzAxMzJCYTRSeGhBMUdSRDB2NjZRbE8wc1MtQndXV2ttbk1HeUdXNk9vanlmNnFleDRTSmdBaWZJMDVaSW5vU0l3d2RpOGs1OWxPZ3VIVXRFWVJzaHVpZEtoZGFJX2hJNlJIcnBWdzRKVF9pc2VOdU1kcmQyMXBabUdlcnZyRFNfUXJ4QUV5MHFnU3FqMjRBVENkUWJkZmZNYWluQlpVUjJNbVJrejdlMVJ5b003NjEzaUdqNWhjRlQ1aGc2WFBCN1FtaDY4YVcxQWF5UEgzcE1mdHBfNXB1Z2NtNWZJYk4yczZBb2k2cGY0aDdMMDgtQXJvRDRrb2NVTWp6N2xFcUd4X0dRTnNnMzUxNk9QeVZmMW1HemFhUTVKOGRCLW5IM1ZaeXJiZGZ1MlcycnE0MWFCZW84ZG5zT3VQbnhRWVdfbnNvNG9DX0N1TVBuVDdBbllfd2RUMHZDN3RtYTA4dUU1TDctTXJ3OXp0dDZmX2liOWNyR2hjZmVlQ044RXRpRml0ZzZTeFVZSGNwY3R4bkxtQzJydm85LTlnRjZPR0ZHbm9PbURrNUxwb3NYdHhreVZPdlJqLU1LM1ZOZnNKZ2FkNVEtejhwalotTlg0eFlpSG8xT21MYW1KMkotZV9YQkFoQko2MU9BaUtHT1EtSzZBOUZWTDVsaEptVFdYMDlOWjRRUktNVW50YnVibnBhUlZLMDdaQTQxU3BhbkhZMUZpdnduV2RlanI3UGhkSXlrdUFpT0h1MGJYajVZQTY1czZZZ3ZZU05sdTVJTWxtbTN2ajNYQXJ4T0lwYmgtbEpBajZWU0hla2Z3LVBGTXl6bnQ1Q21UZVF6bklfWDFlRmZWYUYyOGZUb0ZnWG54MTQ0SnVBTXZTQ2laczJkb1NEVk5MMWdORjRBc0c1SzV5R3NORE83NTQzTnRjRjNhVkFjWHBzV2Q3blEtbF91cmxQU05jd2djWEpSSWRxQ05sOTNPeEJmVkxLT2VLa00zQ3RzZkZSblpya3BPUVd4WEpwRG55TFhDYUZkd3o5bVh0Z2tsd2o2MkZRaTdtcEpQSjdoR0VCeUg1eEQtdmRoTy1lcHBxUnJCMzM1cEV4SXlRZTdTMWlqbWU4WHZvaFFiMnJITTRXemtkTmJVUmtORWxwOWtRYVp2NFo0c0V4WVhqYjVMVkQ3dUtFRlZBR3d6RjZtRjVLQlNzVnBpa1ptTHJoUmtWTmF0UzdXUE13Q3VCcmc4YVpGSXlPTl94QkRZaklqcFJZTFVmUTN6enA1MFhROXFNdXlyVmpORU85ci1uNlZ3LWh3dG43T0daazJyTHpvcVFPeVVzV2Nac25qWjREWER5ai1ZMEZ1VFBKaGRrNlN1WTdSNDZjbEJaQzUtbkZfbnpBNHUyc0VQZndhaGNwd0ZwLUkwbURwbDEzQ1BTV2ZydVQwWTdxdXhiLWNCczNWeDJXRlhfeTcwSzE2ZFVQZk4wR21Zak1ZU25YV1lCSWtXLVA1ekFiTHpORkhiSzI0cnh0dHowLVdpTUZOZ2lwYVdSRHA3VWdNanVkQ0lsUHFJX3NTRkRtYUxlTng0U3lZSURQbFdnUHg2YkwybnVZUTlNNGd3bGwxZnlJNnhNbWhuTnRmU3NOaGJLeGFXUkEzbUhWX3BwQXY3M1BTN2w4eHZjcnJnT2tOMVg3UVRpb3BPRm90NVh5emZlQkhkT3ZySkRXRVNSOEVDbW9TYnYwSHdibTBSemtjVmFodE1Rb2s2em8tcGtpNGdfWlVlQ3AyOUU3Ni1tOE1qb05BU2FPWFZMSjZ2a3o2YzNEMWEyQnZ5QkxmTUhtQWJSUEdyUTdFcmpyYXcxaHo2dEtZX1NkeW9uZDJEVnI=)
        FCI_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmpKRGZpR2tYcDRZN1JPQ3hEWTc0SFpBZzU1dTJKaEp1clhHYWo4V09CamlqQ3dETUFmSWltRXRlMURHQUVKbElpYk1MWjM4UDhidDhYNU8wSVM1S2dCMG91b1E9PQ==)
        FCI_KEY_PASSWORD: Encrypted(Z0FBQUFBQmpKRGZpRUJfMl9JVTRZNDk0VnM0VEF0aTN5QzMtNzBxUTdLa0JINHVYWEprR1JwcXdCZ0xaNUpXcENwcWpaNEtqRVN1emN1cUVOUFVmaENzMms1N1pKQ0c4ZGc9PQ==)
        FCI_KEY_ALIAS: Encrypted(Z0FBQUFBQmpKRGZpcVZIaGs1enhrOEpnQ001OThlNEJqdDFZc0dEU2pWTW5YTkFOcktWVmpXdWxnaENMWmFvbG5PUGptblBMeHVjTklONjdKaVBWNld3c0RhWWgwZmJlV1E9PQ==)
        PROVISIONING_PROFILE: Encrypted()
        CERTIFICATE: Encrypted(Z0FBQUFBQmpKRGZpSXlsMno3UVUtWWRDcEdqWWowWUMxQ0VTLVpaUzRKckhmVUJPLUk4R1NZTW5tSFRXSjh3Mm9ocl9ySzZYVzdsanFvb1Fqei0wYmJkNE4wcDlab3RMUXZGWlpwR3BZdTh0SFo3VVdiYXAzY2lhMmZrUXAwZmNLQ3Z6T1dva1lOa3J6cmJRWDVLTVFhWU90UU5zUTJUWDIwVjJyc0VtSG43Z0sxVWhVS3FsOW84N0Z6aFc4cHRBNFMwRFVNMUFPcWhVRWtOd0s3bXZOeXdIZkZCc2dKOEp6Xy1VbjlRRUtxYVRfQThPS1BQYUVEXzB3b1RpRms4REJqcHM4NXM5bGZTcE5vNm1SdUdyRHU1LXl0cHVRSjQ0UzF5T1AwektvY1dGWWdKcUU1R3U0N0ZOWVdmRFRuM2pvNFdVVWVQXzJJN0gxQXhlNHAzamMyazM4SVRDUXdnLUk0MktpeDhSQUR4OXZtTUdCeEZfUVRIbDRvYTVmVktlQ3VzczNGMkt5OENqblp3U2taYWg5OV82bFdSM1dVMXk1VElXcFRkai1rb2dnTDExZ3lHcm9yNnZQd3RMejlvZXBjblJ1SlZvQUpiZE42M3I5cnRhemtGeU05d3ppTm5lbzV4UGNnZ0M0Z3RmT2pJLVpucUNNNk9sVHFjX3g5V0NobVh3UF8zbkpHRDFvYXA2N3dTaHNXU0N5bjhpUmNoOWFWZ0ZGVWJvNWotUE9uR0stODRCYXJsby1rX0tBZ0pIQW1FSFVsaWQwZVVZNEFtOXZ6d0VyMi1iSS1NWHB2M0FoWmtNRkk4OXpEWHFsYnI2VzZ1b0pBSlJjUGZUQnp0Z29xYTh4MGQ5VkJobVpkYmM5QjRfMzdjZVZfTkpTLUdhT3ZJSHFlWlRkdXl4LWlMbU02bHpMSGhHcjR2ZnVNZXoyelRmYTdSVm85VHdoRkhxeHkyVTF0WkdhX3hNSGVBa3pRQXVWc1ZFX2E5eU5hbHg2OE0weWxDRGV4OW5RNDRnNHVlRTJrTVpwVkV1MkFITFNOYklubWNielF5c25nZ3BQVjlnYnJsZmJ5SkN3c3NpUUdHSERJS0l4cThMWnU0bUdUZVVuX3VvNXlpYVdGTklNS1kyTDV1NUR1Y0twRlJPTDltX21uRkVMT3ZyNjdaQzBWTnh1TUZkeHY1TFd1VGlNRlNtekhLajd5LV8wZl9HLU1XUS1kNFNvUjE1RTNyenpvTmJ0c2ROSzFJa0pkcUttRld1T0hOa1pUUUltMUdMNFJCeV9WNkR0bjR0X0NURHZpSVZEMWNzalZBNVNMLXpmdnhKUnpTQlNnVGRPV3VyWnlkTTUyaFhrbzItam5FUTVtcVQwcno5ZGl2LVBWcTlnWkZYUWo1RHd2UzJxVnZxdl9lOG1wbjNjMkQyejBMMnFpQ3Y5dnpVcTE1T3dqSEdZWmJyaWprb0pTQkw2bW1kR1VmbHktOGJ4TWIxbm9xY05heVVkY2RNTlNUMmw3TndQajBEM2FQZjhDcjY4Tlc3MjJsb0szXzlZdFJvdVNhSjFKSWdnVWxHWENqeFh1RGotYVdWRVpFdWJ0NDk3ek8yNkNjS2ppeE9tU1ZTVGpNMVM1RFQwV2VyTl9kT0Uydl9kSnhrdEJ6MXE2c21NS2l2b05Ib3ZPYnJ6dS1zSElxVDFHUThPXzI1WG54OGgwSE00N19SS1lhbTRHSGltbEtPQ1o5OS1ZN3NyOGlEVmZaLUV3Y1hKekNRUlQxT1RZc1RjX1BpZ1JJd19yQnFTNFZGczc0Q2JXLVh2dUhGQlZzYnRUTzhFMkZ2M1dnOE5iUEJWakxFS3lMbmhPdFFVSlBsSjNmcFp4VzUwOHdMR2wzbDlobnc3Y1N4RmVfX291NFRzTmdzTTlvZTdLTmtZVXB6T2NTeFZmVHNRbjNvWWtTOWppdDBkMm9vN3hOOE80SWVXbmRoWklKTTBPcEdJZGZ2UTNvTnBEV3VnLXpTNVhpS1ZJSGxNOGpvQzBzZGZVZXZ2QWNCdGZhQXJDN1RRcXdCX3ROR0szZnJqbGxScWhFZzNIY2NiVDFPYjh3cW14QnE1eDJEaW13TTlVcGdqRHpTdy1HY1lNY3d2bmJDTHcwbkRnZm9FcFNmbVd2M2laLWxMdkZiVC00aWoyc25FZUowM0ljS1dBYlpscnJJMXA3ZC01bUkyaTR2MDBkNzhCc1dpcjBtMDFIbU1zTXdDUzdTeHZONVRNVzl0U0lxc1h5dVNPVHIzNFM2aFRIWkNqS2ZsV3FhVVoxOFJiM21melktMUM3Vjl0MWlUdDBqQTNSOFNZMkY3N1dENkJpc2VDdWxma2FOY094aDBIYzdPNW9wSmFwY3p5V0JzZnBJQ1Z5MkREcm5aVG9PckpQcllYOGxkSEQ0N0dBbldrTE54VDR4ckxZS2thY0F3Wk1qVXRLZUJVUnJiYndURDA0MDBuNEc3VDA2RjkxblRkWmFWSUppcnRWYWZxSVRYNmt3UWdGVEgtWEp5WW5fdDZXblNEU3ZZMDJBRV9wMXoxT1dUXzJ3Q1lnc0VtQmNEUG1KTFZCbzFTdEZKeHJKNXdJTXhuMEZuMWV4aXZSNmtoalZKNkJuTWVrX2tUWEx2dFRYS2RXXy0xeHpJbTFPdm5naDg2NWNab190X21ld1NHa3BDMmxsZ2V6bngxZ3RyNDl4SlptRGFNTGFkZ0pwOXJMZ2dFTDl6VXd0RU5STEpvTmYzQ256QUdDd0FsS1hFLS1iSWI1VnZ0QjJTSlN6eWhIYzJpcHpsUHlVUVlldXlhSDdXSFRCVjZfWGRORUcySG44RF9NMzNtTmF4NThlUVYyOGY0UmJSQURIUWJUZ1R3UE1BSDczS3JUYnVtclBvYXJiOEMwUVJZdVh5c3NWdGJtQlU3Tk5MLUtjLUpEQkR2R0JpbFFSY0FCM0VrSXdoNVdxbndmU0h2TFFpWUhQUm42WjdYUlNTRlhfVlNNUjJfOERHenJKWVdUeTktMFdxUUctUW9HUGtqZlNnZGVIRUFldlRjS3pNSEJjZjFLcG5aS2NkREhDUFpjbjRtSEhGaWlyOGV6NklkdUpXcUVEY3BwWGN2RjdIaWtXQ0ZRdFg0bGNlQllMaFJqR2JURUJ0Y1BuODNwZk95alJJZDM4SENGN3JiMnpiRjlZb1BfYzJ2VzZScU5zTTI0aUpGZ01hc3VoempNWW1PM0hHRml5NDZkRGlZRDNVdDI4QjBac0tabW5tQ0ZQX0JIT3VHY1RYaU1vc1lNSXZfVUw5YXBtYmpicjFRdGlpc0xXWHpjOVBvV3VoVTFBQ1ZBVU9fWFBBTkFmVjBwbHhXZmhJZ2pKTV9xNGxIRkZybHRhWmhrcnhLdm9LMUpHUkh6WE1hOG5ldVdTNFJYY3FOVVJWcndUbGN1cDZTYjk2NHNMV0JRSU9SYW9LYUFvbFYxU3BmakUzay1paVRBOU1XbGNxZHNDLWtQYlhkRS1wS0NrQUlkWGRITTZubEU5dHdrWktHV0U3WXV5ZE8yUFl0UjVacEJYLUNNNVYtMzVIc0hncWh1S2I2c2RyVmphYjlydEdPUGtHWU5oNzZUZ09lcllKTDFoX09VYUdWVEZPb20wdXdvRXdIaU5tdENRbEw2eWFPZEsySVBfZWJreWNYTVNlZ2lZQzFNTUVrT0xidUEzN3hXeFhaajFhVDVmOU5jVWpUY0p5c1EzWGtZNGlBZ3JPTGdpZWhuQ3Bkc2NNZnhRdGI1SGFVWHRQamh4NnFIcFEyb2pOM1U4TVJ0b0FOLWR1Yk41Y19PbVlWTnVHU19MQk83QTJfeTJlZ1lKRzhvdnJxUzdHRVRJWm1uNzUwbExFVzBQRE9WY2U0VjJhMFZ3X3NrOFVLTGZuUnpTZzcxVGJ5d0dlTVNoTUx6Wk55UzFfeWRsWmVKZ2lmcXYyTVJfVm9CbWtqVlBZWlppc3RfbTlhTlprOENReGVwNFRsTkR4Z1B0Zk04QU9vYUIxaUN3YUpEOHI0eVI2T1dkTkZlcGtsNlY4RlQwMVV4ZTdyc0xFMnBXRkR5SXRrNGRKdkc2aUcwclBSMmRhTkFGUVl2ZERzNHROQVE3VnFMQ0ZHUlV6NmJGVWdmdUpLcGttNXRKQ0IxWTF0TzIySl9Xb3Y3VDJlT2sxRkgyOVNpc0taNlB6bW83bjJjRlk5TUU1dGluWTJpeUoxTWZTendHcFc1LWtaTGtRSWpHYzRDbF95bVQyMGZEMTZ4aUFJYmhMU3RVWlBPdEt1UjdtOXY3NUJjcVBCNVh3eUxtMUhySXRKd2NTVzctYmlUVVMycVRhZU5SbmVYWEVfdTRzamVGZGIxX0VxSnR6UjNnTDZPQjF6amgwMTNQaXdGd1QwNldpMzRYYlF2VTBKc19FOVJ5cFJXQ0ZHdkhKV3lGaHZrRFAySWRsUk5HWlNod0pEOTJ3VlFXZW9RT25rUGx3d1FfUVR5Rk1HcC13OTh4R0tFanNiLTcwbEMwdEVCZFlLaHQzaFZwZUR1NFBoS3E5XzFwRzBtSzdEaVR5bFVXdlZ0bXE3NV9qdjJpZUR1X1ljTndmQklESWtOMWFfUFFLVWJfbXNHbXliMHU4NFBsUV9Yd2ZBcGZIWXQyb1ctZUUzc3FVNmlWYVdRdEtpckwyVlRveVhHSmJmZlk0cnUzVzg2dWZ1RFNLdFZXOGNsbjlZRlQxc1lTajdEakMtclpGcmVyekpxM0NhclZoRkl0ZUNJUVlsRl9Ya0FjMHRnM1lGV0ktY0ZCZ0JmQmE5bFhZZ0RpTWotVmpNR3BYSmtTbVRnTWszcFJrVzF2cy1PNFoxcnZzLV9zZzVwb2RJYzdnX2JqNDdJZFFRelVPVzZ6R3pPMEdKSWNnWnRHTjBDbEhHNURGZFVhT0tXMmxlNEVGVGZ3dnNGYUVJTUh3Ymw4TjFnTHRkbWdQdWpmVjRWZlZjVTRjSng1THRMTlRNRUVfdV9aS0lCSlhSNXhKcmU5b1NvNEQzV1I3a2Z4QVlFTW9rQXpSdDJfVEd6Y2VaWm1GbEN3dVlxY2VVVmUybFdHb2M3SG5LS0pIZF80X0pmVWFGSUR0a1FYa3ExSFdsdXp4X2tDaXBpWHlXdjBsN3V4YnNfMU9reHR3TGtHclRTU20wQW5lOEpJdXctc3pFQVA4QndvV1Zoa3ppS0w3S0NhdzdGNHdWZUpNOHZwVHJlM0EwSkwwSndpRWFaQU9iMHZzQUhlSHhLZW1jVGtrMmhVR19zNkp6YXhRdGtDS3BRVHJfVTA3R1NWV0ZoMjFNeTBTVDhHWWY5ZkNTWXpDQ2FMTGdRSVc0NlBlVHEwUm0zWTdhRWtTSDNQZGwyZFZ6U0hUY2VjWGdZdEY4aEZCV2FzcWRvV0FzNjhUbFFrS2tEaVR3V3JDYTNGWjJqLTk2NE82ejBMLTkyMjJhS3d2SkdCNnhmXzRIR0NBRVg0MkVGYmRrazBLWHN6TGkzUE81NEJRQ3cwRlpndzF2dUdMYnR3dzVSOWhtMm9acUMzbGFnMGJBd3FweFlGUGIyY3VNeFJHUzlYMEJWYWJiUUxaMFd1bU1BX09tNC1fd2UtczU3UTlvQ2hlQ1BnODFlMDNwWmhwUjNsSGZyaHdOUWVpMUlnZmhIZmNvc3h5OFVCRDc4X2o3X2NWV05KSkNqWTc0blVyai1qOTMwd2FPV3ZNclNFV01zUnY2aUM2aEZBajBrN192WHF1UnFTRkMyVGVBcjRzaktQbzBSZU9jODJJdUZsbmU0M1FkR19lc1BJam1FWTFJdUR1WHpPbEpraGpub3hoQjJHUm96cW1vbHlkYzZWQ3BRWjV5SS1ManQ5MzNtUTQzaGN5eHZOT1NLN2JaU0hyTVdIWmRvNkYwVGtuVVJ1ZzB5VWUtU01pQ1NSSHBJNEhlNkJEZ0J2VzdxRkxMOHBjeHNhbWRsV0I5Rk0tSy1YdWZqVnRlWWtveXZINmtGSHFUNF9XVC0wN0xLTTdSMDhRR0hHZXFqVXNhZy1fcDBKWGl2ck5aYVlxd2NkemlyRUk2U1Y0VXQ2UW5KT0o0WFJ2OXlNNkVqcS16UUtjMUNFQmRmN2p1SkJRYzI0SlE0MDdtMTU5TXY5NF91LVBvc1V2N3A0eFVYM19Od0pBZ0RjNGhhaFJpTjBSU1NSV2lGbHVaaVhpVWhmMkwxRnFpNFR4dWlWZFZxV3M5NnFicmF6LVJ5d1d3S3lHRlQtWldfeElzWGRMTnJsWjRYZWRYbmlLM0lTUG0xNUJyLTRxLVRrUDJUci1DZ0tkQy1nd1NqNjlKRG05LXRibndlakhPNnlaaFVENktMU1Zlby1aMWZpOENUNE1IOHFVYjYyQTNTLUl0ZmIwaUMxQXhiajFCQVJSQ19PbUlWZmk5VU9McHpHdWJZZFhyX05NemFZS0kyV3dyeVpnUVJkd3lJZTJ5NjJXWHc2WnpqVzJXNlg0RWxLc2p3eXFFcnBxZFJIX0NNY25ybmJpS0hPZy1lSHRHRzQ2TGxTaEFUeVZSQ1o0c1lzc2c3RElZU3puN0dhQWJGb25ya3BKRzlrMmYzaWhtZ0ZMdTEwRWVKUWUwMW1mbC01OEtqV3hwU1NMdTZYalJaZkt1RUROdHh3VUNZenIzYXl0R2JFM1lET09xNW80S2VOaWtmdl96ZUJ5dW5SZGcyd0l4MjYwbjN5Y3plZHM2MS1yaGpzMEFKeV9pQS1vLXNFRXNHZU9KUFFBTjF6UUlxaEUwamJ3dnA2Y3JIYjhEeTN3MjBoNWNpV1dKYVV6a29vM1lpQ0NiNmFCclYzR1kwU2xMQzkwcm91SFJqYkhMRzhFTjVpR19aMHZ1ejB4dEM3OFppZlY5RzE0YXc5YjlaYTU5Q0xKMVhlakx6bTdmd013Q3Y4OEc5WEszT2d0aEpQX2VXLS1Ia3NOY01waFRWc1FlQ2JTRU5qMlJfX2ZBdlNsa2x0VUczVjNHWlZfcDdUbUpaRkVnaGloWUVpVjBERzkwdS1UTXFRZTlyOTZ4UU5jNTJMcmFFS010aEQ3VTA0cF8wQVRicFQ3Z25MZ2Y3YTMyU3VMYU52RHFVME9VcEJVMnMyTVVsYzNHX21UN3FPalJVY05TZzhuV0owVzBLWHowWHY0Z3RDMWdjc0F3U09WOEZXdGczMmdWellnekZlaVdLRmdSQTlCWU5SVlJUUU85V0syY21YZ2dIeWNFRkpKZzc0SUFfSm9EOFBUc0hLTEVqSENRWDFsbEZoRm9tTmZ0UFZUdFBWbjZNZjV4RjhyRTJOeVVpNnpKR0JfYS1zdlN3cHh1UkZpV2Jrd3NYUTl4X1pQeWdULUtzMzFSSjV1d19IYWs5OEQ3MlB4RWwzbXRmdXJqS2pJZXB5bVlqb2JrQnYxWFg3dXdZMXNULThFVWFzbUVJQnphb04tS19FRmoyN0JQZ2hRdmRxU1RQVl9lLVAtd1hZSGZaNkIwSFVpRHFpOGJKMHlQcExHYXBfVVlFdy0tdXNwSy1vLXpuaERjcXIwdlNBWjFsdHg4b0k2SkFjNFRvZWxFVm5rbkwyeG44cHhDc0RDTU9IRjlsalM2V0UtVlZIT0RrbGF4RDBNbncxSDFBTnphb3pjd1QxOHVORWVKNERxOW9QR2I3LXpMMlMybDlYVXVoZkpQUk5pVEsyNGJXRW1tUTA1SDIwamZTWVF5ZG4tMWJkQkV2UVYxUklrVTJvSndvdWc4eEtSWUtCcldHSHdJeTFqQ3ZiMGxjYWhBTzZ0VGZhVTJzSg==)
        CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmpKRGZpZ1ZtSHVYMFZzZXZPdlVIWl9EdUpWd09rSHZ3SkhobklnWlo1MzNDR3ZJNlF0cTJKdDk5RUs3bVUzWjJoSGdGNkZ5dzNCQmsxdDJxTGd6b2NnTXpUSkE9PQ==)
      flutter: 3.0.2
      xcode: '13.3'
      cocoapods: 1.11.3
    scripts:
      - |
        # set up key.properties
        echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
        cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
        storePassword=$FCI_KEYSTORE_PASSWORD
        keyPassword=$FCI_KEY_PASSWORD
        keyAlias=$FCI_KEY_ALIAS
        storeFile=/tmp/keystore.keystore
        EOF
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build apk --release --flavor uat -t lib/main_uat.dart
      - find . -name "Podfile" -execdir pod install \;
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILE_PATH="$(mktemp "$HOME/Library/MobileDevice/Provisioning Profiles"/ios.mobileprovision)"
        echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_PATH"
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up ios signing certificate
        echo $CERTIFICATE | base64 --decode > '/tmp/certificate.p12'
        keychain add-certificates --certificate '/tmp/certificate.p12' --certificate-password $CERTIFICATE_PASSWORD
      - xcode-project use-profiles
      - flutter build ipa --export-options-plist /Users/builder/export_options.plist --flavor uat
        -t lib/main_uat.dart
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - '*.snap'
      - build/windows/**/*.msix
      - flutter_drive.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      email:
        recipients:
          - dang.phan.2@fecredit.com.vn
          - phap.nguyen.1@fecredit.com.vn
          - nguyenthanhphap1413@gmail.com
      firebase:
        firebase_token: Encrypted(Z0FBQUFBQmpKRGZpTENXdVBUcGh1WFdzejZ1dEpDZlhDTW1SWGhxdmhkc1Z2ZGJCbjFHZ0ZKM2g4V1VRb2JOd2RwMnJHd1RlblE4blhpcElTOUNmUV9wZzc5R3hpckhRSnV2X1Exb2VRWGFOR0JzSy1NRFJHaW43WFdWd29qdFB3MHp0bm8tektuXzdRMVM5T2MzY0JPcmFGTnlJRGxUOGtMOEhDSUFJTlBXSmMtNTdOak1Ud0J3THo2VFQ3V1dRR0g1S3FfTDA0NERWN3pIR05aM3FLc1NIdWRlaFpjQTZuZz09)
        ios:
          app_id: 1:949497735003:ios:ed9a86c4a8278c41585c7e
          groups:
            - testIOS
        android:
          app_id: 1:949497735003:android:1674eba0bcd0ea37585c7e
          groups:
            - testAndroid
      scripts:
        - |
          echo "Find build artifacts"
          dsymPath=$(find $CM_BUILD_DIR/build/ios/archive/*.xcarchive/dSYMs -name "*.dSYM")
          if [[ -z ${dsymPath} ]]
          then
          echo "No debug symbols were found, skip publishing to Firebase Crashlytics"
          else
          echo "Publishing debug symbols from $dsymPath to Firebase Crashlytics"
          ls -d -- ios/Pods/*
          $CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols -gsp ios/config/uat/GoogleService-Info.plist -p ios $dsymPath
          fi
          $crashlyticsScriptPath -gsp $googleServicesPath -p ios $dSymPath     
 releasing-uat-dev:
    name: Releasing Uat Firebase Dev
    instance_type: mac_mini_m1
    max_build_duration: 105
    environment:
      vars:
        FCI_KEYSTORE_PATH: /tmp/keystore.keystore
        FCI_KEYSTORE: Encrypted(Z0FBQUFBQmpKRHhCaUh6MlE3aVFENmt3X29Bd0NCd1M2ZzVTQlQxRzVGTlFQZEwtRllDblB2Tk82cmQ0elVzaGhRUklOVHBSMHpLdF9Fdk1NNEVMN2VjYTJ4YjkwV2R1RW1MM3I2TUg2NEdCb1g0dUsxSEd4bmZEbEoxcVZYQzY5UDBEZGRpVTdoVmlYVmVIcXlxM0VtNlY0bkdXQUp0TFVFVHk5SGYtVXU2MDh5Y1FjWUw0clY3d3ZHMFhINThVbncyeDFsOWd3WlNiMFNiRk9xaTNxaElYSWpGay1CSnU4a3BwVTc2YU1mQTFQRjg5TFJRcnRvTXdYUUFmbkNiTW4xeW4xOXlGLTY3aWRQOXU1Z3I3enJETUNybU11Q3l0UThkWjV6akpMbTVNekFtZ1FjTnFsaVdSaVI5RTlMb0VmOThZeTQ4NTNjeDZOcnM0MDU3bnR3ZEt1SGpDSlJNWnAyRzBzNi1EZFpDTlhRNGJKM2hWeUdqNXhOeWZ0MUxfbE1iMGhzbjBaNkZLVm5pYjRubUxyNmUtNHNtM1JxX2RNREhtSzd5YmhGTkhuX0FWaktSRDZiUjF4UjhET2pPRHlobi00YjhtQThUZXFTa2R4N1BQX2U3bHpTSnVZdkFyUmViVWNyLWFobjFmUG9HYlVaSW8xVnJzRl9LdFYwYmVpRC1mcGpMRkw5WHFZQ2xtcXhRT3pIeDRySDRKOVBqQnVId0JUY192cmVZdm1jNk16Mi1KeS16ZlQtTDFIT0Vhem1NTHROR0xoQkFiX2llR2IyM0pxWkE1d1RpejRleVZJNjdwRUNMTkVkS2tHRzBBRXdzQUcyaHdqOUp0SnQ0YzNiYW5aUVRTbVB4N19HODBpVXBYeFQ0ZnlpUXVROGppdE15SVJCYWgwR2ZlazNBMnFaRU1tYm5SaWYwcE94M2MyZTRPZG5yRW1WODVtUGNHMDV5TkwyZ0NVVy1zUkw2YXdva3ZjazdYUDZGdlFnRHhyZWkyOElTeG9UNHpJbzUyaWVLWndfM3AzcWlyaXNadGVaU2N0Nm8wQktrYUhQbVloYjNCU190U19OWEszb0hwallmZ0EzbVJhYmNnaXFROXpzNF9PRlhQTzc2OEcwUTgzMjJ3TWV5V0pSYm1WSWt4R1lBcHpXdFE2OEJ1ZFdqVkVHTEFITmZCY1ZWejduVnFWZncxNC12eEVzTjRFd3FEcEVDaURnRTBHdGI4ZkNXTExnY3hDbHhiNzVPR3hucDJDZ2VsQ3d2VmRFNHV1bnBLN09KY09fSEVSNld6UzVILTBhWmg4MzdSNHZOczJ3ZjB2Vks3MF90SlVGckRyUmZhX3FSMEIyZldYMDFrTkI3bUJ4UjY2VExueTBscWdoNG11VDI5M3Y3NzNRVU8tMWlsR0w0N2FCdUlTcU05MTk5Mlpjd2tNdXQ2WUZiTzVGeThoaktKQ1hsZkRxQ2FTVEkwTXlCQWwtb3hBQ1V1cDg0S2VIdjVkcjM3QzBrRXFpZDVUam1mMG90Wkl4VkE4SDNRTlp6LUU4WjBhRlJFMW40a0o0MC1KN1Rram9RZElwS3M0ZzFQMWxUYlJKS29oNEx1eGlFdkQ0bnBWb1JlbTJKU2pFdXRmQXRBcWxjY3dKT2ZTNEt5dTlCemZ5WG1MS0lpZVEyQ2gzZlROT19PalNhU3JXRDdUY1RvaE9Udy00ZHhETWdrRWJpNnlFRXBCS1RSQ2RmY0Fqckd4SWNpd2gxdGZnS3cwbEdVR1BpcVZHMGN1WHMzVkFRRWJoMU53Zmt1S2lhS2cxUnlnNjhFdm9ZOXZCRWN2NEhKeE8xSGhCNjNZaGlQV1NoM3JBSjU4MGM0M1cyMWhQOWZfdVJKYmk0UWN4TVl6ZG1oVmI5Zjk2N3F5V05xQXpmMVZJaksxOS01YUxGR2wzVURsWjlQWlBCbGN4aVRDT3poR0NCdDFnZV9JbUZsbHFtUXQxZ2pDbENucTBPR3oza0g3cFQ3RG1OX2ZLWHNDVDV3R2xmWmVrdDR3WUwzbUkxcmo5SVE0Q25VRDktVFRzU3J6OUhTZ2hfSkJ5ZXJEQTA1YUxtYTJkZFc4QjdhZHE4LU1zQjN3bzNkNEFSNWhfb1BWX3NHOFIzNWhMTFlfM0R6OFhfcmJXYVhKMUh3MFRVajVqdFE2bzBjSWYzQkNwaldXNGVHQktOSG9QN1E0ZEtCbVFYX3hVTFM5NXJUT2d2dlFxZlZVUkM2SFBUeDRFRnV5WUJsNHYwc0N1VVZCN2VCV0ZFa3kyR2VVeVpSOFBOTFN6QkFrSDdBTjJENzdYSzliV2M0eVFFeS12czVEZlFQNTJvYzBrc3FsQmxpc2MzU0pfb3duWjg1NEFWelZncllmM21wWk9DSGdLU1BOaGhtaTl5a2pTd2NhNGRzbTJUbUs5NXBoTnlINm1WSy1OTThBdkc0SDk3UXdxSGV6SmNaVjlCbHJoSjdKbl9LZ3g4VU9xb0xoLTR2TF9tRmIxMVNCMWNwREZRMXNrdFo5S3Y4NHRvS2l5Ykx0ZW10V3NJczhsVDhwS2RDQzBLTEEzd0Q2bDVjNE5tekNHXzlmMDA0R0N3dWNNUkk1b1ZqSnZINmZfaUJlcW9rY19hbjZqTUdEaXBHb3Z3MGx3d0xwZW5LaXhuNXJIaXBULU8xNmkzTFJGQlZzSW9ibkpnMTNUek0xTGlZSkFfTUlqcERkQjNFZVJBdjhhS2NxUl9GSjBCLU4yeHBDT3BQVHBEYXBma2lRcldVaHo1VFl0cjVwblJReGtPQ2tMNjBCSnZwa041QXpQdTR0WWM3NnFGTnctOTRXMUJTOTRBNWlVdjVzXy1RTVd0X0tYM0lmLURiUjZpWVdBaHl3LWNKWE92aVBaUzBGS1hyQWsteWNneWRoZDI5b25Mdl9pb3EzU21ETV93X2UyT1N5OElmR0tmZkk2cEk2eW9wdE5FVkpVTG1iQzZZb1UwZHVyLUs0Q1ZEbTBaeWEtQmc5bWVZNExVOWNZU3lwMzg0ajFnQTNjR3Y0QWFHQ0MxbUVPa0UzX0VZYWJ3cHVaWUgwNUFONWlYdmF4U2VQXzlxQWs0ZEROQ1NGajM1R2FTcXRQWG9rRDBEM2tZRUFtTjQyOWpMQXlZX2lYa000ZkNFcGFic3ZuS3FyOXc1SzFfREpVNEhIejJHbGJmZ3I0U3BrYUpiLW93YnFKYmg0eFh4SC0tSUhITGE0R18wQ29sYjd5TVcxdjlkUUNpdkNoTEI5aEh6THdRNTh3RTJpZXFUQ1RQaU9GSzl2QXdmMVdmaDQ5bXRwbmNxd2hHaVYzSkQ3S3g5X2NPZ0thQVpWNm0xbGFnVzh6TVkyajc0dnZPaDdCS05LN0RyX0h2aEhQQ2JscDZpanN5U2ZGWFBXQk04d2JWWnhYdjNSOW9fZzZ5eS1NemNYazJMMFpfWTNHRHIyVXVkQThScnQteWx3X2FPb01rWVQ1N3l4dkRpX0ZXWG5wRjl0MnMyY2Y4U0hQUzJMWFRIV1p1YUV0bE94RjlLbW0tMlUzT2pmVTA3ZDlOcEx3dmY4cHpPN2l2OTlKXzRKR2VXc1ppZ1VSRGdIWEpyd2lzNW1FakpqOWU1RVQ3b1BFR1hXM0hrN2F4SE4ydWl3NmVKSTJUV0ZJSWJXSDE0bGVWLW1meW11dm56UWRGOExaOHZxS3psV2xkQlg1WklCb1RYZVdiWGVfbTRKclE3ZjcwNUVTc2U4N1BUcUliRmVfZmRLUktEUUJ2NzllQS1ZTlN2MDBVUUNiZ2tPMk1VWkNielFJcWhyY1VMYkctSTBudDdBZW9mZmlEcC1QZWU5Z3pyajhZaml3bURLTlEtV1Y1Q0lCcHFfcWI0TXh2Z09OREpoS0l1MGxIampEbFpMcERaT3FvMGhaZlR1dFY1TnhmWnl6VkRHTWRsVHFtcDNiOEpkYUx6RjAxbkd1UmFEYUtQOUVCeENMWWlJR0pTUDRPbFVPVzhZZmtKSVBjaXhjRUF3U0FNc1BERFBhTzNIcFZ2bmNwd1VURFg0bUV5WElXQ3ZuTFdfVE1WdXFERXRnaDRFWDIydlV0d2U4OUJFYmdDdGxOUXZIaGtmWjBCZzRZSEp1Zk9JQVhndHVXQ3ZZZE5JVnMwQ2VyUFFMY085TnFvaXU0YTNUZGhoN0huZzZBUlJ0S2pjMzR4MlFlU0dXc1RvUkM3WFM1Um5HYUFQeEE1RWpVc05sYXF0c3BwSENydWVOVDVnMVJRSkhWWkIyTkpWOF9jMEtiUDV5dFZPa2RDeU1NZHRLamtrMGpWbVZBUVN1VENGdHR4NFZNQmdfZ1Z6NFdRZUJZU2RBZkhLYTBuNGhjYjdRT2hMVFFCNnl6MmlmSTlUbzZHNTlKX0VZc3BJRnU2Z0UwWWV0eWp6NkNWY2tqRnQxTGVCODVTN2NpUEl1a1JlaU4yd3AteE1nem5VVHl1M0xjZ0ZUYTZaZVBncV8yRl9xSzQ4b2ZhdDZ1OGNDLUNRZ1ktTE1idVcxNExDeTg4WDZpak5RVDVHYTFsWWRqZTlfSk5TXzZ6TTlFeExBZjY0V2FPUnJrQ1pyRXZxZ0tJR0M5clVJczZoWHI5Z2l5emtYZlA5a24xODhzYmFJV0JhUFg0TndhVmpmZE9xT2Nya3RGUlIxTFZFQW9NVFNFZnZwWHpJVWMyNnJ6TUhTZ1VxcWVUNC0xUlFoUkRNUEVzWVZfYVNIV3dGSFNXdERVRndZSEZXeS1GRWVLSUs3RE52a3JqOERUOFR4LU4zQTVkel9XdDJmcU1XcjVZcXJWQW11ZFBXVjBkWldpTkgta2FKbTg2ZExNTUk0RHFPcGpodzQ5X0ZaS3JudDdBWGc3aGlPLWsxaU92NG11YmI0endENlZDSDFpOUxhU1JXY3k0cFQ5cmtSNHAzVnNOeFhnLWVhVmJYUVpOUmFrWWNpZ0ZlU1hhckxMdUhwaXNORndobHhrNTdXdEhNQ1ZZNnNpYjZfSjRJb1VvZlZRWGYtRW1iRDRad29aOC1LOEl6WEtsYlVxRU1IRXllVWNZV2dEeFJHMGZjcG56T0QwcjlqQWlCSGtLVUtab1hjZzVDb093aThxZVZxQ1ZlNzhXZ3dhLVRzYWNyZGxKZFpTRllKMXpETzBpS2p3M3VWa2MtWXFzWmxESEtqVW5jNVhrLUlLNS05LTlBWmM0RFl3WnQ2Wktnd1lRMmhGY21ublNEYnN3Ym5JUl9YczJHTUhFOC1EdE5td1hxcFRaQi1wSE5lNkExTUJ4T19OTlZyZ0xMb0dIckczWDFTd0k=)
        FCI_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmpKRHhCRTM4MlhrVEtMZW42dWhGdVNCaGVXMlZSaDZGaEFQZTBXeGRfQkd3SEJDMlNqYm5WZXBtemxkZFNPV0FUdEZGWF9nd2dCc2dCYTRWcHpmNWw0c3JBVkE9PQ==)
        FCI_KEY_PASSWORD: Encrypted(Z0FBQUFBQmpKRHhCWHQ3S0szcDRGYVR6WjdHcW02M0J5aERzcGRKcVpRZFJteGZfZXhzbDN1MjJra25zV2JzMWN6emdvTUhrX3ptLVh1ZjdieXBKSWkwa1hRclJjM3J5dWc9PQ==)
        FCI_KEY_ALIAS: Encrypted(Z0FBQUFBQmpKRHhCS2FQaklNRWprbGdhTlhtSlRYbjBQUHlhTTM5SzhlMEwxSTBpbWNVejFwTThxMlBnM3MxZUVSUTVUUmdkZVdyX2dURGNZVk51X1pDSFBsUU1yY1AtS0E9PQ==)
      ios_signing:
        distribution_type: enterprise # or: ad_hoc | development | app_store
        provisioning_profiles:
          - profile: icl_uat_release
        certificates:
          - certificate: ios_distrubute_uat
      flutter: 3.0.2
      xcode: '13.3'
      cocoapods: 1.11.3
    scripts:
      - |
        # set up key.properties
        echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
        cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
        storePassword=$FCI_KEYSTORE_PASSWORD
        keyPassword=$FCI_KEY_PASSWORD
        keyAlias=$FCI_KEY_ALIAS
        storeFile=/tmp/keystore.keystore
        EOF
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build apk --release --flavor uat -t lib/main_uat.dart
      - find . -name "Podfile" -execdir pod install \;
      - flutter build ipa --export-options-plist /Users/builder/export_options.plist --flavor uat
        -t lib/main_uat.dart
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - '*.snap'
      - build/windows/**/*.msix
      - flutter_drive.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      email:
        recipients:
          - dang.phan.2@fecredit.com.vn
          - phap.nguyen.1@fecredit.com.vn
          - nguyenthanhphap1413@gmail.com
      firebase:
        firebase_token: Encrypted(Z0FBQUFBQmpKRHhCakVnUzF6aGdUVktwT1pWU3pseWFXaF9vbWozeXpOTllfSXotYWtENnVGQy1TenU2cV92YjRFZVFocEs4LWNhSE5RVURyVzhVazRWUE1Yc080U25HR3lnbVJlNXgxbFIxWG8zenBEZE1MdUVSVjl5Nm1heGhuQkRzOFJ6QVRUc2tEZURyZFByUVE1WEJNUUxfWXRvYl9LQWVCWU5MRVlkOHFSdU9hcFc3TVpqTWlhUzlMRzBhX2RKOEh2TzZzWDlEWWduV3dJekhtVGY4a1FHLURnbzhvQT09)
        ios:
          app_id: 1:949497735003:ios:ed9a86c4a8278c41585c7e
          groups:
            - devtestios
        android:
          app_id: 1:949497735003:android:1674eba0bcd0ea37585c7e
          groups:
            - devtestandroid
      scripts:
        - |
          echo "Find build artifacts"
          dsymPath=$(find $CM_BUILD_DIR/build/ios/archive/*.xcarchive/dSYMs -name "*.dSYM")
          if [[ -z ${dsymPath} ]]
          then
          echo "No debug symbols were found, skip publishing to Firebase Crashlytics"
          else
          echo "Publishing debug symbols from $dsymPath to Firebase Crashlytics"
          ls -d -- ios/Pods/*
          $CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols -gsp ios/config/uat/GoogleService-Info.plist -p ios $dsymPath
          fi
 prod-android-apk:
    name: Building Android Prod Apk
    instance_type: mac_mini_m1
    max_build_duration: 105
    environment:
      flutter: 3.0.2
      xcode: '13.3'
      cocoapods: 1.11.3
    scripts:
      - |
        # set up debug keystore
        rm -f ~/.android/debug.keystore
        keytool -genkeypair \
          -alias androiddebugkey \
          -keypass android \
          -keystore ~/.android/debug.keystore \
          -storepass android \
          -dname 'CN=Android Debug,O=Android,C=US' \
          -keyalg 'RSA' \
          -keysize 2048 \
          -validity 10000
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build apk --release --flavor prod -t lib/main_prod.dart
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
      - build/**/outputs/**/mapping.txt
      - '*.snap'
      - build/windows/**/*.msix
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - dang.phan.2@fecredit.com.vn
          - phap.nguyen.1@fecredit.com.vn
          - nguyenthanhphap1413@gmail.com
 production-release:
    name: Production Release Android And IOS
    instance_type: mac_mini_m1
    max_build_duration: 105
    environment:
      vars:
        PROVISIONING_PROFILE: Encrypted()
        CERTIFICATE: Encrypted(Z0FBQUFBQmpMQi1RRXVMcWZSQXBVWFNtVzQ5a3gwby1jbkE3TG5mMlkzSTQ3ektRTEdGYVZfNGRITGVwSzNtRmVBT1ZxYXRpSzBqMFpxY01jMl9yaUUzX3VSQXRBWk9KbzE0bXp1RDVrRmZ0QU5icUhxcDJHa3hQbVNJZ1R1dEROWUFUc2tGNmtKV0xfb1lSN0gtOTFhcnVHLUcyNzFweEJyMll3U2MwV2N0T3A2cExyX2xPQ0VjR1B1M3NjT0xFMk81VGo2cHZMNjhwYWczSGFjTk9EQXVoRGI4Qnd2NVltS0NScG45X0tGdC1Hb2M4eW9GcEdocmxNZW50Y0F1cGZKd0JaREM1VTBpNUhLaDlKRVZoMVVxQ2pRaWg1ZERrSl9mNGFGOHRDQjE3X0JvU3hEVkY1VUotOWxPRnkxdTBPRWxIT3pwUmpjTk5IS1VvVlN3b2gwbU1hWXVQN0JLTC14WEx1QjhkSVo4QzNhdWQ3cjdLRkw0UzVFYkpjOE9ucGtmSncxX3dDZ3JJdElfdEhSa1Q2bkRkbURKRnlsN3NQOGlEc3NjM29PZURmeUFKVzB5RmIyQlJXZHpuTnR1VWFSLWtqa1FWa2FBMk9IWEliVkcwZkx5MWs0RG5md3ViWGltMjlWeVJCSWw4c2Y3Wm0wWGZyT3ViM1pOV2lwUUdYZTVrRHM5NmFKcGlVbFA5YWZ2TkM3U2pxaHNmQjZ0YTZ4TmdQbkhuV19IUDRxV0tKaURuTERSWVp4dlRtZDY2RHJQTkJoQVBfU1JTbnl5MFdUdGNQZGRGUmNneXZXbzF4akFhUHFFRTNMWWplLUxjUGZhZlFwNGdJd0hnQ1Q1UnM1SDR1NFlJZmVZcDZweW1YZXdXMHhobTFYMmtuRFlYTlpGbnpWWDJxeVZFN1FKcEFlckNvSVdnWHRGR05SMWczYjdDZFhXaWQydFQ0Y3U3TWd6b0taRFJnMzdhb0RyVzVDQ0VpQ0ZPcF9hdFF6WTlhMnFORGs4NmRNc2o1SlBHbjNEWWViLS1CRnZOOTI1eHJLLVVMbzF2TTFWWWQ3ZFBySk5EOE5LSjQ2V2c1TzVmYmZXNm5iQi1oVnZveldHbHBmcG4zOEVGbHZLT2pPSHRaX01idy02ZUF3M0RuY2JBV29jd0tjb3RJbHVocHFnVUNmdUI0czV0R2dSejNpazVnME5JMHhsV3lUYWYyamdNS3pRQmxDU2ZfTDdsVWk3WEZhUXJBZW5jVU8tczVhU0duV0dVWE51QndnYm03MFJFVGp4b0UxVFZ2Z3hYYTEtR0w3LXpTZjM2VzViVXhNSHloaVcxNmpibGxPbXJPSG9GckJmeHhPZnE0QUtLeERHbXk5RHEwYndoTnJMbE44UUhCX0V2bGxWZWxMQzZiOE5veVo2SHF5ZVFRbnQ4QlhhYlVjQmlkeVVLcWJySF9ua3dZZlFQSkNJQkNwNUxTS3VsQVNZWnVQdm1BZnpfakM0YmFGS193TU1jb0dsaTltLXRJbFA1OU5oRVZGZDNCOXpCUS1NMUtKME5DY3JxMVRfa3dZX2RZSVdmNmxnUC1kVDdUd05SejN5NW1pVUlfek1Na1dsRVpQSFp6Y1lRZkVRS201OXo0NWhya28ydjc5REFmbk1fbXhwY0hMTDMyRTBlTGJJcDhVX1lENEl2X1lSS2JaS2wtZVFvXzRLNWJobDVUOW8wbWpCbDRQM1EwSURRODhhWGVkNkRWZFFRQ0JwOE1lenVMaTVaSHhqVHpRTHhSZWtTUFBtVHpTRUV2VktPUkN2OG5LTEp3LXZGSHpFdGZrSE9BdjNLTVRFcmJsdTRoWjc5VFF6YlRYdWN0S1d5VDZ2QWhCX282OUpKOThmZmY4QXNDZ1lmWk1jYVkyTTlIVDdDMzhOS3dweUFMbnFYc3JmNzhVamw2VHFEeW8zS3ZRbzNXVjRMX3ZIWG5Ic3E2SEZsMFZCSmZLNi04S0ZNRHd0REJuSFQxeF9ab2lnY1Jyalh1UTUxamt3VVNDVTZZYk9Hd3RaVWJhOFY4VG51WDE1eks0V0dXSGpZMW1POHRCU0YzYnFQanZmbTBob09hQVY4cXVYcExJNEYzTGVxTDZDX2tfMFBSMDBYTUQ3QW9KRjByS2dGWTliU004WVNZMGhTN1A5V3BVejZHMEVNUEtOODRmeEhVU3ZkMFdtNURERWJwMUJpWHhBRHd2RmRJOGg4a3dBbzdzajdGTmpGb09TcnBEdWY5eVQ4eEowd3hlMmkyeUpHOUVPa2tNcmtSUnhjUjVXbzg1c2F5Vk4wOE1Od0FBM2VJcWNtb0cxY2xPc2xBb1RqV0pPbWc0SXZlMHBEdXlFRGhWYk5OLU1wY1ZJaTBQS2tJV0NPMjd6TFNTbGt4eHVPWGhxT3BmMmRHZGthMjg2WURCdUY1d2VhZXZKQU9sQmJ3aEdVYVVjekZKejNWYy1HQmU5VndsZXJ5c2swY3NnSGlMNHBod0dVajFyYkdSUDdrdXVJZFdfZ2hHMFNNLU1LX3U1N093OG5fLU9vM01sbVhIdlZ6V2piaVFIdGwyWmhWbFpOQTRvVDVDYTJlcXBRdzlkV285T0RlQTRNZ1ladVdKbUU4Y1N4SjlheE9GTnFEN0VHeXRjdnZnNkxXNmhmU2ZsczY4LU80WGxOU1dvU1ZnS19tR1p6MG5qQjNJU0M1Q0hkLTI3bDJoN2xaOG9XRl8tTl94UnczaTljSmlhY3NoRUxoYUVaQ3haU0twczdwaHNQcHRrQVZET2l4QkZVamhnOFNqQk1rcnY0REd0dFd5aWVpWncyUmRFdmd1d2p1cEEyMnR3Zm1oNTZmLUd1RnliSmNZczdZTzRleFV0NUJEQk1iM3ZYOWk2ZDZSLVFnLWxUMFZMR1h4cU5TcXFBZmZocEs4ejJpUVJ2TW9LandMeDY4ZXp4aWJfVzlBOHNzcU5pMGxLLUZnXzVzd245X2dSXzA3N1pISUhmeUdabnI5Z0x2MHJCNHg0WFJab1IwemxGTTlkZWNUemNkcW1GV2ZNT3pnRFB6LWdPcUdoNktKMDJ1YlVvZWNBcVZyRTB2NUF5aXRSS0wxZ2RQN3liTzlCNHR3c1FmYkloTENoYTJBdDVjSXRSdml3eEw1V3QtZTdHUDhvZWlrT3BRSDVnQTNsMU16ODAxNkd3VUM4TVRmMnY3ckM0dl9fNkZkMFQ3Wm1IeFBISm1IVUdoSGdFeUlkTzFNX2FGZ0w5TXptUzZhUVVKU3VlUy1wWnRuWVNHcmpmM0tiWGdUSVZrMW9XalRRQlFUR0kycXdxRnh4SmtCSUxTNy1iU0RQSFdrWFNaempzTUNXa194NUROdWZhaWxzU1ZOTnFrakUwYlFqVHdoUHBGY1VWT0d1XzhtUWZKNEtZNHA2VW1sMlJlSzBuZjExWlRlSTVqVW81YnpUMkxCdFR5N3FFVVh3NktNRUt6aXNXZHdOVk16aTdUc3JlN1ZLZlBLVXJIY21HYnBEQjc0N3BGUEJVaVBXRjE2THJCOXdDR1dHaVRrNW1kYVRLUlc1bnFibGRmeE9fMG51bXI2OUswZWIzWjRFRllmUmYtUFBkdC13a0U0ZFo3YzJvOC1XYnBBbDhLSWFrVjNFWTZWd1BGMUFkR2ZadnZsY1hwQURiTzJTZXBYYUEzTEt4MDJZV0xNb25GVW9zQ1JJRXdyTW5QSnVVZ1hsR0sxWXJCU0NzaElGNkFzTko0dlFmUFhaN29CbGVUWkR3TEdCa1pSendhY1V4Z0Jyck45OE1SXzNGcTQtZHRmbmM5ZHRsUzc4czZVdlp3alZtNTB6UkZJSlJHY0pSa24wMDF3TUY0M1llNHJuWG44cTc1R1ZUWWtMNHFDRnBld3M0bDRZWjAxMFVSNk53VDNCQkotWUs2V3Y0NmIwNG5zak1mcGJJUHdnM2ZWN2p1SFFlZy1QQnBsLU5MY1dWU0NKczBfZnJaQmVPbGFQQWNiQU9RcVZqeXlBUWtleXA0WjZWemdTcEFEbmVLY20tNW5ibzM2M1JsR1BkTzdpbUExRXd2b0dfNWFJNVhKX2QtbVpmN3Zxb3VpMFp0dTUxdjc1NjZ2LWNZN2doQjJUT3lmSFVPemlOY1JSWlZmOW5HbGJEYjRrQmI5WmFYRWlZZHhpR0VaTEpTS2hXSlVETXRNRmw4V2dySUxjSGZ1N3BhUW5sVkRjTkhsWHA2NDVNa3ptRGkxRDdvY21BdjNpWkpXRTFTMTNaeGdNZXlyQUxKb3dyQzlWSnRsLXUyRUZoYjUwT2IzMDhoRWtpZl9WdHNkdlhWaXUxZkJ3YzRnY3hHTHRYQko5cDZFNEVvREN6NmdKR1lGUVg3X25yUlFBUS1tVmotQzE3cVQzOGl3ejZSeDNOc3U0RHNoUGpyVlF2dkdld2dpbE9YRXJtaHFTWnRHUVJ5SkthVExUSkFiejBaVnJvX29qNEZEaDd6ZzJDS3RURzdhN1Z1OHlOR2YzZkJfTUtIM0pLS3RLZGtOS3h5bTRtOTZZZVVFa184MUZMR1lKalpabkc3RmNTVkVlNF9Gc2UyMXBjZkVScnBfRWtTTFA2VGJwMkFJa25oZFNVTUI1Snd0OXpOU1dJTWo2ZllWeHF6UEQ0NWRNR1QxeFdqS3RCcVlXS2QtcFhIU0Zici04Ql9iMlRkelhsSWNuLWRqVk5vLTdzcmRRVnVOUTV6MmF3VXVpU1FmeUV5bUNyYjBFQmc3b2xJTWRwSU1ZZVZvZjA2MloyaS0xaU5DcmRrM1FxNFM2V1BVeV9zLU5WNUZPZ094VFVJajk4RkpKaFEzeG1qc3duRXJNNkdiTmVCNFc5SVR5dlJTOEVJQU83NTlPSjdEVzl5RG5VdUNEZi1BNzhlZWxIV0JXTlZLYk5yNGVpQm1helpmTVJuNUtTcTBIRWJSVlRCR2VaSkY1dEIyZ2ltc0VMcEMxaHItc1lZWmdFYjZ4QzRwNlVBeVNhYm95TlR3MFpiNUwzUGJGcTVzRk01Vnc0M1RqZXRiUnZYeW9abnhaNzJYZUNaaVhYdl8tVXF3Q1YxaEp3eDQySDJERWRHTG9ValpEODhaOHlkdVg0bzJYSXVBcXRhVElvQ0g0a3JGOEZ0QV9SLXFpMnpGUkFJS2JVbUNHNlo2VGhpZ2drQ1VkbXBCVTczcnZaXzItVmhVS3BNUExHTk9PeEFoQ0hPZFVCUVA0VU9TM2FlWHFucF9KcFM2V2ItWi12UEtybGd4Q3ZqV0VHS0I4emhHQk5HN1hEblk1RGJiNWV2cW9YTkdkTlRxTXAtVWt6eURYU0lYTGJUYS10SXFlRWVUVGxmYkRqTWJYYzZsRVdKeDNYZFlRalJUNi1YcGJmVkJVRkNza2UzY01RS0p5SkRwMDZQRDhlZm5GYk9hMld4ckNmdHplTVh5X0ZBRUt1Ykg4eTFXM0FaWHBjaWR4R19wRkNuV3ZQWW91aWtBSFpYSmFZMWY2ZU8zMWFReW52dDZQQjRpNTFWRnoxd3VpU2EtMHpsbFd5WFFqVGRTWFpEeFpXc3FJLVByd3ZGSzcyajh6dFBxSEY4SlNmY0NidzY3c2JYdEE0R1ROYU0yejh5OXY5MW5BUjNiaUZ5a0lhMkI1QXN2WExzYW82YjJtc1dqa3pmNWNwVHgzcVFaMTNLQkFjT05lc21QeGJCU0NrdUlkWlhsZWVUY0VLVGRvbnNiUW1rb0FtejFkS3M2LXpBdjBZSmMyelRqQlYwWEdVWTVzcm1RVlU1MDZZU2EwSnhncm8zYXFEWGRwRGhJRURTTjU3MjV1QXhpUkVaazBQaEc4Y0x5RWt1SGNlb25NaUo2TFVzdlA1NDRlY2YwSFhtRWczakgtbDRtc2NnbmJySDlKWlJPZERmYXB5NFc4V0htem10TjRNN05QRzdJVzJrMDFud2tNV2JfdW4wd3JieFdIV3Z6R2JQdkoyaVVyY3ZLQjFCWVFwRXF2OXNCUk1tcHcwazYxOUFFOXlsZHFFU2NVQ1FqQmw0Zzh2UllNVDlMaHJWbjV0YlRWX1NBbmIwYWs0ejU5OGRKQlBLU21tRnAtd19SWkhRVHY3ZWtQdC1panMxVjhHX3c4azRpZFFIanNHSzhJSzZkTjhjTTdxM2gzZG93X2NINHNnWGxrVW5paFRYSGZQVldqcnFmN083MTBjT2o1MVhsU21KTVROVVJta0VDV0RxNk5UZENNalhqc1ZreGFfdURtX1VEX3B3VHllWm9EZGNrN0xTYjZURTNqay1ENENXNFFBQXk5eFhXSjFJV1l4TDZLeGw4U3pJZ2FIbkNDTHlKekdYWU9tdURHV3BwZDIwYTRhRFdrZnRGQjJyU3Bob0RaOTRXdk4wTllnWVpJb0M5Q3BkSjViMUhFUUVDRFVwOEtKQnRyR200T0FGNktKQTBnNGJ5MHR3MUlmYjVlT2ppY3JQTnB3QmZubElaWVpTOHI3TnAtZ1ZSdmU2eUlFVVRSbWpPTS1RemVIcThPMEpmdUVCLWl1aHRoa3dMR2JRQ3dHamN3dFNaSnpSSjRzM1J1OGhNbFFmQmRrNzhLTFY2NDRGUmt3bHhhbEZOb3VUOWg2YWFQLVRxeVdWemxuSjZOeWstZGlqWVNLWWdWUmpYal84SHpyejNmLU9XQlJ2M0tqdnlOel9HMU1hdERTNU4wd3NlSy1XYWxkLWlrU2dfMzdkYTFycjE1STBZNEZBZkJmM2Y2WmNnMzVtS1h2UWNFaXZpWGlMLV9xV1lLZU9zd0VWQk9pZEtKRUhHTktadEhtVmMtdXBEaGtSZVBNdEVybXV2RkFuTjh6bi0xVGkxVnhSUHlsUTNKSk1rODZpYloxM3JqNjg4bktrMm9QU0t6aXlBMTRvZU1JaUx3WnQ5QW5nZGFCaFozellSWl93aFBPZm0tRXNoWnVLRXV1cGtZUWxZeWdYbFM2dlZqLXpLa2xYQ1dEV3lpOFBtVjl0TU0ybXUySnU0OExVU2t6dkVsUFFWWmlpZ2pqSWtYNGlMZndYSHdNalZWSzRRa3FDdWxyc2lFaHNTaldSNjhQbmpsTTVzZFBsQTJiME52TklIWXNwRGtETkYzN1R2VERUSlNxS3FaWUh0UDR6d200a0pjYWtLeGR4REwtNmE2MDBnWnNyUnJFa2lLRjdzWmlVbWVaTTdiTlJjOU1FRlotSnNyRHVPOENSTWhaczhLZk1LTXo0eWhjLTBjVXdETFVDMlJsRmQ1bGotbmgtbmh5QXNySV8wYl9oTmotMkFHTzAzTVhIR2JYdHBXME1yNGd6TDJGSEZIY2RyTUtHTUVnSXBuRlJILVJyLXZ5MmE3UG1jbFRuWHlEUDVGMlhUalJyT0FDWTFHRFEzX1l3Wl9ieUFCc3ZuUUxiQW43UmVpRlpQbmdyd2Y3QUhMbHdYOEdvUkk2ZUtsNDNjVk1mVjJWLTBzazhwTEdrdDZodXFCNVlKOTRxNXM1UFNSZWwzdmFRaVNKX0V2QTVneTB5WTdHNXNZSnNBV056Ty0xNXp6VUhKREtKS0JXbWt2dS1TN081UVRqcFRZZU9oR3RKcXJHSnJZNDllbThSa0Z3TTdZSWtTOEhETzU0MGlsbDQxdnM5ZFFNMTI1ZFNJdEFBMld3ekE2SExQVjlyR1c0ZXpLN21CVjk2MFB0TjAzbFNwVWxLaFIzc05GUDJPSGRfQndQWUpBcVN2blBQUjFrSXNMVmhtaHZLSkx6SUpCaFNpdUl6M3JmUk1fRGNQRVJJcmJCQU44SQ==)
        CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmpMQi1RUWlDNG9tUnFLN0JGWHRpbVNEYnkxVnFJSUVwZTNaclNCMEM0eEZmcUtnLWJWd0Vqb2t6QkN3ZEpJZlFPaWxuZE9ONDViUnpWNmhTZGs4cUtQQkpwaWc9PQ==)
      flutter: 3.0.2
      xcode: '13.3'
      cocoapods: 1.11.3
    scripts:
      - |
        # set up debug keystore
        rm -f ~/.android/debug.keystore
        keytool -genkeypair \
          -alias androiddebugkey \
          -keypass android \
          -keystore ~/.android/debug.keystore \
          -storepass android \
          -dname 'CN=Android Debug,O=Android,C=US' \
          -keyalg 'RSA' \
          -keysize 2048 \
          -validity 10000
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build apk --release --flavor prod -t lib/main_prod.dart
      - find . -name "Podfile" -execdir pod install \;
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILE_PATH="$(mktemp "$HOME/Library/MobileDevice/Provisioning Profiles"/ios.mobileprovision)"
        echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_PATH"
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up ios signing certificate
        echo $CERTIFICATE | base64 --decode > '/tmp/certificate.p12'
        keychain add-certificates --certificate '/tmp/certificate.p12' --certificate-password $CERTIFICATE_PASSWORD
      - xcode-project use-profiles
      - flutter build ipa --export-options-plist /Users/builder/export_options.plist --flavor prod
        -t lib/main_prod.dart
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - '*.snap'
      - build/windows/**/*.msix
      - flutter_drive.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      email:
        recipients:
          - dang.phan.2@fecredit.com.vn
          - phap.nguyen.1@fecredit.com.vn
          - nguyenthanhphap1413@gmail.com
      firebase:
        firebase_token: Encrypted(Z0FBQUFBQmpMQi1RNm1Lc0x5VlJMQ0ROQUZhUzNXQndsZzZETkREdVZRay1pc3ZYb3N5OW94YUZSRV81a0p2b2hYeUdDYWdKTXRJRjNlOEg5UkJDdDhKdHA4VGlYMlF4SDJnSEIzTzZoY05FbXA1aGlFWnFLdkR3SFM3elJBeGptUUJrRzcxcDYtNUdfUWFGRndHdkl3ODdabHpPdEt4ck44bVVpMlBubWRGOG9RNmVKdEw2MTE1YjJXeEE4S29DdVdteDV6Q1daN0pmazVITlhCQUFCZ25CN0tCQjNQXzM2QT09)
        ios:
          app_id: 1:383058140462:ios:f498441f1b5e0c62272ebf
          groups:
            - ios_releasing
        android:
          app_id: 1:383058140462:android:06377029245641dd272ebf
          groups:
            - android_releasing
      scripts:
        - |
          echo "Find build artifacts"
          dsymPath=$(find $CM_BUILD_DIR/build/ios/archive/*.xcarchive/dSYMs -name "*.dSYM")
          if [[ -z ${dsymPath} ]]
          then
          echo "No debug symbols were found, skip publishing to Firebase Crashlytics"
          else
          echo "Publishing debug symbols from $dsymPath to Firebase Crashlytics"
          ls -d -- ios/Pods/*
          $CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols -gsp ios/config/prod/GoogleService-Info.plist -p ios $dsymPath
          fi